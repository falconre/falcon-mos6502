use std::fmt;


#[derive(Clone, Debug, Eq, Hash, PartialEq)]
pub enum Opcode {
    Adc,
    And,
    Asl,
    Bcc,
    Bcs,
    Beq,
    Bit,
    Bmi,
    Bne,
    Bpl,
    Brk,
    Bvc,
    Bvs,
    Clc,
    Cld,
    Cli,
    Clv,
    Cmp,
    Cpx,
    Cpy,
    Dec,
    Dex,
    Dey,
    Eor,
    Inc,
    Inx,
    Iny,
    Jmp,
    Jsr,
    Lda,
    Ldx,
    Ldy,
    Lsr,
    Nop,
    Ora,
    Pha,
    Php,
    Pla,
    Plp,
    Rol,
    Ror,
    Rti,
    Rts,
    Sbc,
    Sec,
    Sed,
    Sei,
    Sta,
    Stx,
    Sty,
    Tax,
    Tay,
    Tsx,
    Txa,
    Txs,
    Tya
}


impl fmt::Display for Opcode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Opcode::Adc => write!(f, "adc"),
            Opcode::And => write!(f, "and"),
            Opcode::Asl => write!(f, "asl"),
            Opcode::Bcc => write!(f, "bcc"),
            Opcode::Bcs => write!(f, "bcs"),
            Opcode::Beq => write!(f, "beq"),
            Opcode::Bit => write!(f, "bit"),
            Opcode::Bmi => write!(f, "bmi"),
            Opcode::Bne => write!(f, "bne"),
            Opcode::Bpl => write!(f, "bpl"),
            Opcode::Brk => write!(f, "brk"),
            Opcode::Bvc => write!(f, "bvc"),
            Opcode::Bvs => write!(f, "bvs"),
            Opcode::Clc => write!(f, "clc"),
            Opcode::Cld => write!(f, "cld"),
            Opcode::Cli => write!(f, "cli"),
            Opcode::Clv => write!(f, "clv"),
            Opcode::Cmp => write!(f, "cmp"),
            Opcode::Cpx => write!(f, "cpx"),
            Opcode::Cpy => write!(f, "cpy"),
            Opcode::Dec => write!(f, "dec"),
            Opcode::Dex => write!(f, "dex"),
            Opcode::Dey => write!(f, "dey"),
            Opcode::Eor => write!(f, "eor"),
            Opcode::Inc => write!(f, "inc"),
            Opcode::Inx => write!(f, "inx"),
            Opcode::Iny => write!(f, "iny"),
            Opcode::Jmp => write!(f, "jmp"),
            Opcode::Jsr => write!(f, "jsr"),
            Opcode::Lda => write!(f, "lda"),
            Opcode::Ldx => write!(f, "ldx"),
            Opcode::Ldy => write!(f, "ldy"),
            Opcode::Lsr => write!(f, "lsr"),
            Opcode::Nop => write!(f, "nop"),
            Opcode::Ora => write!(f, "ora"),
            Opcode::Pha => write!(f, "pha"),
            Opcode::Php => write!(f, "php"),
            Opcode::Pla => write!(f, "pla"),
            Opcode::Plp => write!(f, "plp"),
            Opcode::Rol => write!(f, "rol"),
            Opcode::Ror => write!(f, "ror"),
            Opcode::Rti => write!(f, "rti"),
            Opcode::Rts => write!(f, "rts"),
            Opcode::Sbc => write!(f, "sbc"),
            Opcode::Sec => write!(f, "sec"),
            Opcode::Sed => write!(f, "sed"),
            Opcode::Sei => write!(f, "sei"),
            Opcode::Sta => write!(f, "sta"),
            Opcode::Stx => write!(f, "stx"),
            Opcode::Sty => write!(f, "sty"),
            Opcode::Tax => write!(f, "tax"),
            Opcode::Tay => write!(f, "tay"),
            Opcode::Tsx => write!(f, "tsx"),
            Opcode::Txa => write!(f, "txa"),
            Opcode::Txs => write!(f, "txs"),
            Opcode::Tya => write!(f, "tya")
        }
    }
}


pub(crate) enum AddressMode {
    Absolute,
    AbsoluteX,
    AbsoluteY,
    Accumulator,
    Immediate,
    Implied,
    IndexedIndirect,
    Indirect,
    IndirectIndexed,
    Relative,
    ZeroPage,
    ZeroPageX,
    ZeroPageY
}


use self::Opcode::*;
use self::AddressMode::*;


pub(crate) const OPCODE_TABLE: &[Option<(Opcode, AddressMode)>] = &[
    // 0x00
    Some((Brk, Implied)),
    Some((Ora, IndexedIndirect)),
    None,
    None,
    None,
    Some((Ora, ZeroPage)),
    Some((Asl, ZeroPage)),
    None,
    Some((Php, Implied)),
    Some((Ora, Immediate)),
    Some((Asl, Accumulator)),
    None,
    None,
    Some((Ora, Absolute)),
    Some((Asl, Absolute)),
    None,
    // 0x10
    Some((Bpl, Relative)),
    Some((Ora, IndirectIndexed)),
    None,
    None,
    None,
    Some((Ora, ZeroPageX)),
    Some((Asl, ZeroPageX)),
    None,
    Some((Clc, Implied)),
    Some((Ora, AbsoluteY)),
    None,
    None,
    None,
    Some((Ora, AbsoluteX)),
    Some((Asl, AbsoluteX)),
    None,
    // 0x20
    Some((Jsr, Absolute)),
    Some((And, IndexedIndirect)),
    None,
    None,
    Some((Bit, ZeroPage)),
    Some((And, ZeroPage)),
    Some((Rol, ZeroPage)),
    None,
    Some((Plp, Implied)),
    Some((And, Immediate)),
    Some((Rol, Accumulator)),
    None,
    Some((Bit, Absolute)),
    Some((And, Absolute)),
    Some((Rol, Absolute)),
    None,
    // 0x30
    Some((Bmi, Relative)),
    Some((And, IndirectIndexed)),
    None,
    None,
    None,
    Some((And, ZeroPageX)),
    Some((Rol, ZeroPageX)),
    None,
    Some((Sec, Implied)),
    Some((And, AbsoluteY)),
    None,
    None,
    None,
    Some((And, AbsoluteX)),
    Some((Rol, AbsoluteX)),
    None,
    // 0x40
    Some((Rti, Implied)),
    Some((Eor, IndexedIndirect)),
    None,
    None,
    None,
    Some((Eor, ZeroPage)),
    Some((Lsr, ZeroPage)),
    None,
    Some((Pha, Implied)),
    Some((Eor, Immediate)),
    Some((Lsr, Accumulator)),
    None,
    Some((Jmp, Absolute)),
    Some((Eor, Absolute)),
    Some((Lsr, Absolute)),
    None,
    // 0x50
    Some((Bvc, Relative)),
    Some((Eor, IndirectIndexed)),
    None,
    None,
    None,
    Some((Eor, ZeroPageX)),
    Some((Lsr, ZeroPageX)),
    None,
    Some((Cli, Implied)),
    Some((Eor, AbsoluteY)),
    None,
    None,
    None,
    Some((Eor, AbsoluteX)),
    Some((Lsr, AbsoluteX)),
    None,
    // 0x60
    Some((Rts, Implied)),
    Some((Adc, IndexedIndirect)),
    None,
    None,
    None,
    Some((Adc, ZeroPage)),
    Some((Ror, ZeroPage)),
    None,
    Some((Pla, Implied)),
    Some((Adc, Immediate)),
    Some((Ror, Accumulator)),
    None,
    Some((Jmp, Indirect)),
    Some((Adc, Absolute)),
    Some((Ror, Absolute)),
    None,
    // 0x70
    Some((Bvs, Relative)),
    Some((Adc, IndirectIndexed)),
    None,
    None,
    None,
    Some((Adc, ZeroPageX)),
    Some((Ror, ZeroPageX)),
    None,
    Some((Sei, Implied)),
    Some((Adc, AbsoluteY)),
    None,
    None,
    None,
    Some((Adc, AbsoluteX)),
    Some((Ror, AbsoluteX)),
    None,
    // 0x80
    None,
    Some((Sta, IndexedIndirect)),
    None,
    None,
    Some((Sty, ZeroPage)),
    Some((Sta, ZeroPage)),
    Some((Stx, ZeroPage)),
    None,
    Some((Dey, Implied)),
    None,
    Some((Txa, Implied)),
    None,
    Some((Sty, Absolute)),
    Some((Sta, Absolute)),
    Some((Stx, Absolute)),
    None,
    // 0x90
    Some((Bcc, Relative)),
    Some((Sta, IndirectIndexed)),
    None,
    None,
    Some((Sty, ZeroPageX)),
    Some((Sta, ZeroPageX)),
    Some((Stx, ZeroPageY)),
    None,
    Some((Tya, Implied)),
    Some((Sta, AbsoluteY)),
    Some((Txs, Implied)),
    None,
    None,
    Some((Sta, AbsoluteX)),
    None,
    None,
    // 0xa0
    Some((Ldy, Immediate)),
    Some((Lda, IndexedIndirect)),
    Some((Ldx, Immediate)),
    None,
    Some((Ldy, ZeroPage)),
    Some((Lda, ZeroPage)),
    Some((Ldx, ZeroPage)),
    None,
    Some((Tay, Implied)),
    Some((Lda, Immediate)),
    Some((Tax, Implied)),
    None,
    Some((Ldy, Absolute)),
    Some((Lda, Absolute)),
    Some((Ldx, Absolute)),
    None,
    // 0xb0
    Some((Bcs, Relative)),
    Some((Lda, IndirectIndexed)),
    None,
    None,
    Some((Ldy, ZeroPageX)),
    Some((Lda, ZeroPageX)),
    Some((Ldx, ZeroPageY)),
    None,
    Some((Clv, Implied)),
    Some((Lda, AbsoluteY)),
    Some((Tsx, Implied)),
    None,
    Some((Ldy, AbsoluteX)),
    Some((Lda, AbsoluteX)),
    Some((Ldx, AbsoluteY)),
    None,
    // 0xc0
    Some((Cpy, Immediate)),
    Some((Cmp, IndexedIndirect)),
    None,
    None,
    Some((Cpy, ZeroPage)),
    Some((Cmp, ZeroPage)),
    Some((Dec, ZeroPage)),
    None,
    Some((Iny, Implied)),
    Some((Cmp, Immediate)),
    Some((Dex, Implied)),
    None,
    Some((Cpy, Absolute)),
    Some((Cmp, Absolute)),
    Some((Dec, Absolute)),
    None,
    // 0xd0
    Some((Bne, Relative)),
    Some((Cmp, IndirectIndexed)),
    None,
    None,
    None,
    Some((Cmp, ZeroPageX)),
    Some((Dec, ZeroPageX)),
    None,
    Some((Cld, Implied)),
    Some((Cmp, AbsoluteY)),
    None,
    None,
    None,
    Some((Cmp, AbsoluteX)),
    Some((Dec, AbsoluteX)),
    None,
    // 0xe0
    Some((Cpx, Immediate)),
    Some((Sbc, IndexedIndirect)),
    None,
    None,
    Some((Cpx, ZeroPage)),
    Some((Sbc, ZeroPage)),
    Some((Inc, ZeroPage)),
    None,
    Some((Inx, Implied)),
    Some((Sbc, Immediate)),
    Some((Nop, Implied)),
    None,
    Some((Cpx, Absolute)),
    Some((Sbc, Absolute)),
    Some((Inc, Absolute)),
    None,
    // 0xf0
    Some((Beq, Relative)),
    Some((Sbc, IndirectIndexed)),
    None,
    None,
    None,
    Some((Sbc, ZeroPageX)),
    Some((Inc, ZeroPageX)),
    None,
    Some((Sed, Implied)),
    Some((Sbc, AbsoluteY)),
    None,
    None,
    None,
    Some((Sbc, AbsoluteX)),
    Some((Inc, AbsoluteX)),
    None
];